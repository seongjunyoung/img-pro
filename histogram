// ImageProcessingDoc.cpp : implementation of the CImageProcessingDoc class
//

#include "stdafx.h"
#include "ImageProcessing.h"

#include "ImageProcessingDoc.h"
#include "DownSampleDlg.h"
#include "UpSampleDlg.h"
#include "QuantizationDlg.h"
#include "math.h"
#include "ConstantDlg.h"
#include "StressTransformDlg.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

/////////////////////////////////////////////////////////////////////////////
// CImageProcessingDoc

IMPLEMENT_DYNCREATE(CImageProcessingDoc, CDocument)

BEGIN_MESSAGE_MAP(CImageProcessingDoc, CDocument)
	//{{AFX_MSG_MAP(CImageProcessingDoc)
		// NOTE - the ClassWizard will add and remove mapping macros here.
		//    DO NOT EDIT what you see in these blocks of generated code!
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CImageProcessingDoc construction/destruction

CImageProcessingDoc::CImageProcessingDoc()
{
	// TODO: add one-time construction code here

}

CImageProcessingDoc::~CImageProcessingDoc()
{
}

BOOL CImageProcessingDoc::OnNewDocument()
{
	if (!CDocument::OnNewDocument())
		return FALSE;

	// TODO: add reinitialization code here
	// (SDI documents will reuse this document)

	return TRUE;
}



/////////////////////////////////////////////////////////////////////////////
// CImageProcessingDoc serialization

void CImageProcessingDoc::Serialize(CArchive& ar)
{
	if (ar.IsStoring())
	{
		// TODO: add storing code here
	}
	else
	{
		// TODO: add loading code here
	}
}

/////////////////////////////////////////////////////////////////////////////
// CImageProcessingDoc diagnostics

#ifdef _DEBUG
void CImageProcessingDoc::AssertValid() const
{
	CDocument::AssertValid();
}

void CImageProcessingDoc::Dump(CDumpContext& dc) const
{
	CDocument::Dump(dc);
}
#endif //_DEBUG

/////////////////////////////////////////////////////////////////////////////
// CImageProcessingDoc commands

BOOL CImageProcessingDoc::OnOpenDocument(LPCTSTR lpszPathName) 
{
	if (!CDocument::OnOpenDocument(lpszPathName))
		return FALSE;
	
	CFile File;

	File.Open(lpszPathName, CFile::modeRead | CFile::typeBinary);

	if(File.GetLength() == 32*32){ // RAW 파일의 크기 결정
			m_height = 32;
			m_width = 32;
		}
		else if(File.GetLength() == 64*64){ // RAW 파일의 크기 결정
			m_height = 64;
			m_width = 64;
		}
		else if(File.GetLength() == 128*128){ // RAW 파일의 크기 결정
			m_height = 128;
			m_width = 128;
		}
		else if(File.GetLength() == 256*256){ // RAW 파일의 크기 결정
			m_height = 256;
			m_width = 256;
		}
		else if(File.GetLength() == 256*276){ // RAW 파일의 크기 결정
			m_height = 276;
			m_width = 256;
		}
		else if(File.GetLength() == 512*512){ // RAW 파일의 크기 결정
			m_height = 512;
			m_width = 512;		
		}
		else if(File.GetLength() == 640*480){ // RAW 파일의 크기 결정
			m_height = 480;
			m_width = 640;
		}
		else if(File.GetLength() == 176*144){// RAW 파일의 크기 결정
			m_height = 144;
			m_width = 176;
		}
		else if(File.GetLength() == 176*216){ // RAW 파일의 크기 결정
			m_height = 216;
			m_width = 176;
		}
		else{
			AfxMessageBox("Not Support Image Size"); //32*32, 64*64, 128*128, 256*256, 512*512, 640*480, 176*144 크기의 파일만을 지원
			return 0;									 // 기타 이미지 크기 일때는 종료
		}

	m_size = m_width * m_height;

	m_InputImage = new unsigned char [m_size]; 
		
	for(int i = 0 ; i<m_size ; i++)
		m_InputImage[i] = 255;
		
	File.Read(m_InputImage, m_size); // 파일 읽기 
	File.Close();
	
	return TRUE;
}

BOOL CImageProcessingDoc::OnSaveDocument(LPCTSTR lpszPathName) 
{
	CFile File;
	CFileDialog SaveDlg(FALSE, "raw", NULL, OFN_HIDEREADONLY);

	if(SaveDlg.DoModal() == IDOK){
		File.Open(SaveDlg.GetPathName(), CFile::modeCreate | CFile::modeWrite);
		File.Write(m_OutputImage, m_Re_size);
		File.Close();
	}
	
	return TRUE; 
}

void CImageProcessingDoc::OnDownSampling()
{
	int i, j;

	CDownSampleDlg dlg;
	
	if(dlg.DoModal() == IDOK)
	{
		m_Re_height = m_height / dlg.m_DownSampleRate;
		m_Re_width = m_width / dlg.m_DownSampleRate;
		m_Re_size = m_Re_height * m_Re_width;

		m_OutputImage = new unsigned char [m_Re_size];

		for(i=0 ; i<m_Re_size ; i++)
			m_OutputImage[i] = 255;

		for(i=0 ; i<m_Re_height ; i++){
			for(j=0 ; j<m_Re_width ; j++){
				m_OutputImage[i*m_Re_width + j] = m_InputImage[(i*dlg.m_DownSampleRate*m_width) + dlg.m_DownSampleRate*j];
			}
		}
	}
}

void CImageProcessingDoc::OnUpSampling()
{
	int i,j;

	CUpSampleDlg dlg;

	if(dlg.DoModal() == IDOK){
		m_Re_height = m_height * dlg.m_UpSampleRate;
		m_Re_width = m_width * dlg.m_UpSampleRate;
		m_Re_size = m_Re_height * m_Re_width;
			
		m_OutputImage = new unsigned char[m_Re_size];


		for(i=0 ; i<m_Re_size ; i++)
			m_OutputImage[i] = 0;
	
		for(i=0 ; i<m_height ; i++){
			for(j=0 ; j<m_width ; j++){
				m_OutputImage[i*dlg.m_UpSampleRate*m_Re_width + dlg.m_UpSampleRate*j] = m_InputImage[i*m_width + j];
			}
		}		
	}
}

void CImageProcessingDoc::OnQuantization()
{
	CQuantizationDlg dlg;

	m_Re_height = m_height;
	m_Re_width = m_width;
	m_Re_size = m_Re_height * m_Re_width;

	m_OutputImage = new unsigned char[m_Re_size];

	if(dlg.DoModal() == IDOK)
	{
		int i, j, value, LEVEL;
		double HIGH, *TEMP;

		TEMP = new double [m_size];
			
		LEVEL=256;
		HIGH=256.;

		value = (int)pow(2, dlg.m_QuantBit);

		for(i=0 ; i<m_size ; i++){
			for(j=0 ; j<value ; j++){
				if(m_InputImage[i]>=(LEVEL/value)*j && m_InputImage[i]<(LEVEL/value)*(j+1)){
					TEMP[i]=(double)(HIGH/value)*j;
				}
			}
		}

		for(i=0 ; i<m_size ; i++){
			m_OutputImage[i] = (unsigned char)TEMP[i];
		}
	}
}

void CImageProcessingDoc::OnSumConstant()
{
	CConstantDlg dlg;

	int i;

	m_Re_height = m_height;
	m_Re_width = m_width;
	m_Re_size = m_Re_height * m_Re_width;

	m_OutputImage = new unsigned char[m_Re_size];

	if(dlg.DoModal() == IDOK){
		for(i=0 ; i<m_size ; i++){
			if(m_InputImage[i] + dlg.m_Constant >= 255)
				m_OutputImage[i] = 255;
			else
				m_OutputImage [i] = (unsigned char)(m_InputImage[i] + dlg.m_Constant);
		}
	}
}

void CImageProcessingDoc::OnSubConstant()
{
	CConstantDlg dlg;

	int i;

	m_Re_height = m_height;
	m_Re_width = m_width;
	m_Re_size = m_Re_height * m_Re_width;

	m_OutputImage = new unsigned char[m_Re_size];

	if(dlg.DoModal() == IDOK){
		for(i=0 ; i<m_size ; i++){
			if(m_InputImage[i] - dlg.m_Constant < 0)
				m_OutputImage[i] = 0;
			else
				m_OutputImage [i] = (unsigned char)(m_InputImage[i] - dlg.m_Constant);
		}
	}
}

void CImageProcessingDoc::OnMulConstant()
{
	CConstantDlg dlg;

	int i;

	m_Re_height = m_height;
	m_Re_width = m_width;
	m_Re_size = m_Re_height * m_Re_width;

	m_OutputImage = new unsigned char[m_Re_size];

	if(dlg.DoModal() == IDOK){
		for(i=0 ; i<m_size ; i++){
			if(m_InputImage[i] * dlg.m_Constant > 255)
				m_OutputImage[i] = 255;
			else if(m_InputImage[i] * dlg.m_Constant < 0)
				m_OutputImage[i] = 0;
			else
				m_OutputImage [i] = (unsigned char)(m_InputImage[i] * dlg.m_Constant);
		}
	}
}

void CImageProcessingDoc::OnDivConstant()
{
	CConstantDlg dlg;

	int i;

	m_Re_height = m_height;
	m_Re_width = m_width;
	m_Re_size = m_Re_height * m_Re_width;

	m_OutputImage = new unsigned char[m_Re_size];

	if(dlg.DoModal() == IDOK){
		for(i=0 ; i<m_size ; i++){
			if(m_InputImage[i] / dlg.m_Constant > 255)
				m_OutputImage[i] = 255;
			else if(m_InputImage[i] / dlg.m_Constant < 0)
				m_OutputImage[i] = 0;
			else
				m_OutputImage [i] = (unsigned char)(m_InputImage[i] / dlg.m_Constant);
		}
	}
}

void CImageProcessingDoc::OnNegaTransform()
{
	int i;

	m_Re_height = m_height;
	m_Re_width = m_width;
	m_Re_size = m_Re_height * m_Re_width;

	m_OutputImage = new unsigned char[m_Re_size];

	for(i=0 ; i<m_size ; i++)
		m_OutputImage[i] = 255 - m_InputImage[i];
}

void CImageProcessingDoc::OnBinarization()
{
	CConstantDlg dlg;

	int i;

	m_Re_height = m_height;
	m_Re_width = m_width;
	m_Re_size = m_Re_height * m_Re_width;

	m_OutputImage = new unsigned char[m_Re_size];

	if(dlg.DoModal() == IDOK){
		for(i=0 ; i<m_size ; i++){
			if(m_InputImage[i] >= dlg.m_Constant)
				m_OutputImage[i] = 255;
			else
				m_OutputImage[i] = 0;
		}
	}
}

void CImageProcessingDoc::OnGammaCorrection()
{
	CConstantDlg dlg;

	int i;
	double temp;

	m_Re_height = m_height;
	m_Re_width = m_width;
	m_Re_size = m_Re_height * m_Re_width;

	m_OutputImage = new unsigned char[m_Re_size];

	if(dlg.DoModal() == IDOK){
		for(i=0 ; i<m_size ; i++){
			temp = pow(m_InputImage[i], 1/dlg.m_Constant);

			if(temp < 0)
				m_OutputImage[i] = 0;
			else if(temp > 255)
				m_OutputImage[i] = 255;
			else
				m_OutputImage[i] = (unsigned char)temp;
		}
	}
}

void CImageProcessingDoc::OnStressTransform()
{
	CStressTransformDlg dlg;

	int i;

	m_Re_height = m_height;
	m_Re_width = m_width;
	m_Re_size = m_Re_height * m_Re_width;

	m_OutputImage = new unsigned char[m_Re_size];

	if(dlg.DoModal() == IDOK){
		for(i=0 ; i<m_size ; i++){
			if(m_InputImage[i] >= dlg.m_StartPoint && m_InputImage[i] <= dlg.m_EndPoint 
			   || m_InputImage[i] <= dlg.m_StartPoint && m_InputImage[i] >= dlg.m_EndPoint)
				m_OutputImage[i] = 255;
			else
				m_OutputImage[i] = m_InputImage[i];
		}
	}
}

void CImageProcessingDoc::OnAndOperate()
{
	CConstantDlg dlg;
	int i;

	m_Re_height = m_height;
	m_Re_width = m_width;
	m_Re_size = m_Re_height * m_Re_width;


	m_OutputImage = new unsigned char[m_Re_size];

	if(dlg.DoModal() == IDOK){
		for(i=0 ; i<m_size ; i++){
			if((m_InputImage[i] & (unsigned char)dlg.m_Constant) >= 255){
				m_OutputImage[i] = 255;
			}
			else if((m_InputImage[i] & (unsigned char)dlg.m_Constant) < 0){
				m_OutputImage[i] = 0;
			}
			else{
				m_OutputImage [i] = (m_InputImage[i] & (unsigned char)dlg.m_Constant);
			}
		}
	}
}

void CImageProcessingDoc::OnOrOperate()
{
	CConstantDlg dlg;
	int i;

	m_Re_height = m_height;
	m_Re_width = m_width;
	m_Re_size = m_Re_height * m_Re_width;


	m_OutputImage = new unsigned char[m_Re_size];

	if(dlg.DoModal() == IDOK){
		for(i=0 ; i<m_size ; i++){
			if((m_InputImage[i] | (unsigned char)dlg.m_Constant) >= 255){
				m_OutputImage[i] = 255;
			}
			else if((m_InputImage[i] | (unsigned char)dlg.m_Constant) < 0){
				m_OutputImage[i] = 0;
			}
			else{
				m_OutputImage [i] = (m_InputImage[i] | (unsigned char)dlg.m_Constant);
			}
		}
	}
}

void CImageProcessingDoc::OnXorOperate()
{
	CConstantDlg dlg;
	int i;

	m_Re_height = m_height;
	m_Re_width = m_width;
	m_Re_size = m_Re_height * m_Re_width;


	m_OutputImage = new unsigned char[m_Re_size];

	if(dlg.DoModal() == IDOK){
		for(i=0 ; i<m_size ; i++){
			if((m_InputImage[i] ^ (unsigned char)dlg.m_Constant) >= 255){
				m_OutputImage[i] = 255;
			}
			else if((m_InputImage[i] ^ (unsigned char)dlg.m_Constant) < 0){
				m_OutputImage[i] = 0;
			}
			else{
				m_OutputImage [i] = (m_InputImage[i] ^ (unsigned char)dlg.m_Constant);
			}
		}
	}
}


void CImageProcessingDoc::OnHistogram()
{
	// 히스토그램의 값은 0 ~ 255
	// 히스토그램의 크기값을 MAX = 255로 정규화 하여 출력
	// 히스트그램의 크기 : 256 * 256 지정

	int i, j, value;
	unsigned char LOW, HIGH;
	double MAX, MIN, DIF;
	
	m_Re_height = 256;
	m_Re_width = 256;
	m_Re_size = m_Re_height * m_Re_width;

	LOW = 0;
	HIGH = 255;
	
	//초기화
	for(i=0 ; i<256 ; i++)
		m_HIST[i] = LOW;
	
	
	//빈도수 조사
	for(i=0 ; i<m_size ; i++){
		value = (int)m_InputImage[i];
		m_HIST[value]++;
	}

	// 정규화
	MAX = m_HIST[0];
	MIN = m_HIST[0];

	for(i=0 ; i<256 ; i++){
		if(m_HIST[i] > MAX)
			MAX = m_HIST[i];

	}
	
	for(i=0 ; i<256 ; i++){
		if(m_HIST[i] < MIN)
			MIN = m_HIST[i];
	}
	
	DIF = MAX - MIN;

	for(i=0 ; i<256 ; i++)
		m_Scale_HIST[i] = (unsigned char)((m_HIST[i] - MIN) * HIGH / DIF);


	// 히스토그램 출력

	m_OutputImage = new unsigned char [m_Re_size + (256*20)];

	for(i=0 ; i<m_Re_size ; i++)
		m_OutputImage[i] = 255;

	// 정규화된 히스토그램의 값은 출력 배열에 검은점(0)으로 표현			
	for(i=0 ; i<256 ; i++){
		for(j = 0 ; j<m_Scale_HIST[i] ; j++){
			m_OutputImage[m_Re_width*(m_Re_height-j-1) + i] = 0;		
		}
	}

	// 히스토그램을 출력하고 히스토그램의 아랫부분에 히스토그램의 색을 표시
	for(i = m_Re_height ; i<m_Re_height + 5 ; i++){
		for(j=0 ; j<256 ; j++){
			m_OutputImage[m_Re_height * i + j] = 255;
		}
	}
	
	for(i = m_Re_height+5 ; i<m_Re_height + 20 ; i++){
		for(j=0 ; j<256 ; j++){
			m_OutputImage[m_Re_height * i + j] = j;
		}
	}

	m_Re_height = m_Re_height + 20;
	m_Re_size = m_Re_height * m_Re_width;
	
}




void CImageProcessingDoc::OnHistoEqual()
{
	int i, value;
	unsigned char LOW, HIGH, Temp;
	double SUM = 0.0;
	
	m_Re_height = m_height;
	m_Re_width = m_width;
	m_Re_size = m_Re_height * m_Re_width;


	LOW = 0;
	HIGH = 255;
	
	//초기화
	for(i=0 ; i<256 ; i++)
		m_HIST[i] = LOW;

	
	//빈도수 조사
	for(i=0 ; i<m_size ; i++){
		value = (int)m_InputImage[i];
		m_HIST[value]++;
	}

	for(i=0 ; i<256 ; i++){
		SUM += m_HIST[i];
		m_Sum_Of_HIST[i] = SUM;
	}
	
	m_OutputImage = new unsigned char[m_Re_size];

	// 입력영상을 평활화된 영상으로 출력
	for(i=0 ; i<m_size ; i++){
		Temp = m_InputImage[i];
		m_OutputImage[i]=(unsigned char)(m_Sum_Of_HIST[Temp]*HIGH/m_size);
	}
}

void CImageProcessingDoc::OnHistoStretch()
{
	int i;
	unsigned char LOW, HIGH, MAX, MIN;
		
	m_Re_height = m_height;
	m_Re_width = m_width;
	m_Re_size = m_Re_height * m_Re_width;

	LOW = 0;
	HIGH = 255;
	
	
	MIN = m_InputImage[0]; // 최소값을 찾기위한 초기 조건
	MAX = m_InputImage[0]; // 최대값을 찾기 위한 초기 조건

	for(i=0 ; i<m_size ; i++){
		if(m_InputImage[i] < MIN)
			MIN = m_InputImage[i]; // 입력 영상의 최소값 찾기
	}

	for(i=0 ; i<m_size ; i++){
		if(m_InputImage[i] > MAX)
			MAX = m_InputImage[i]; // 입력 영상의 최대값 찾기
	}
	
	m_OutputImage = new unsigned char[m_Re_size];

	for(i=0 ; i<m_size ; i++)
		// 히스토그램 stretch
		m_OutputImage[i] = (unsigned char)((m_InputImage[i] - MIN)*HIGH / (MAX-MIN));
}

void CImageProcessingDoc::OnEndInSearch()
{
	int i;
	unsigned char LOW, HIGH, MAX, MIN;
		
	m_Re_height = m_height;
	m_Re_width = m_width;
	m_Re_size = m_Re_height * m_Re_width;

	LOW = 0;
	HIGH = 255;
	
	
	MIN = m_InputImage[0];
	MAX = m_InputImage[0];

	for(i=0 ; i<m_size ; i++){
		if(m_InputImage[i] < MIN)
			MIN = m_InputImage[i];
	}

	for(i=0 ; i<m_size ; i++){
		if(m_InputImage[i] > MAX)
			MAX = m_InputImage[i];
	}
	
	m_OutputImage = new unsigned char[m_Re_size];

	for(i=0 ; i<m_size ; i++){
		if(m_InputImage[i] <= MIN){ // 원영상의 최소값보다 작은 값은 0
			m_OutputImage[i] = 0;
		}
		else if(m_InputImage[i] >= MAX){ // 원영상의 최대값보다 큰 값은 255
			m_OutputImage[i] = 255;
		}
		else
			m_OutputImage[i] = (unsigned char)((m_InputImage[i] - MIN)*HIGH / (MAX-MIN));
	}

}

void CImageProcessingDoc::OnHistoSpec()
{
	int i, value, Dvalue, top, bottom, DADD;
	unsigned char *m_DTEMP, m_Sum_Of_ScHIST[256], m_TABLE[256];
	unsigned char LOW, HIGH, Temp, *m_Org_Temp;
	double m_DHIST[256], m_Sum_Of_DHIST[256], SUM = 0.0, DSUM = 0.0;
	double DMAX, DMIN;

	top = 255;
	bottom = top - 1;

	m_Re_height = m_height;
	m_Re_width = m_width;
	m_Re_size = m_Re_height * m_Re_width;

	m_OutputImage = new unsigned char [m_Re_size];
	
	m_Org_Temp = new unsigned char [m_size];
	
	CFile File; 
	CFileDialog OpenDlg(TRUE);

	// 원하는 히스토그램을 갖는 영상을 입력 받음
	if(OpenDlg.DoModal() == IDOK){
		File.Open(OpenDlg.GetFileName(), CFile::modeRead);
		
		if(File.GetLength() == (unsigned)m_size){
			m_DTEMP = new unsigned char[m_size];
			File.Read(m_DTEMP, m_size);
			File.Close();
		}
		else{
			AfxMessageBox("Image size not matched");// 같은 크기 영상을 대상으로 함
			return;
		}
	}

	LOW = 0;
	HIGH = 255;
	
	//초기화
	for(i=0 ; i<256 ; i++){
		m_HIST[i] = LOW;
		m_DHIST[i] = LOW;
		m_TABLE[i] = LOW;
	}

	//빈도수 조사
	for(i=0 ; i<m_size ; i++){
		value = (int)m_InputImage[i];
		m_HIST[value]++;
		Dvalue = (int)m_DTEMP[i];
		m_DHIST[Dvalue]++;
	}

	// 누적 히스토그램
	for(i=0 ; i<256 ; i++){
		SUM += m_HIST[i];
		m_Sum_Of_HIST[i] = SUM;
		DSUM += m_DHIST[i];
		m_Sum_Of_DHIST[i] = DSUM;
	}
	

	//원영상의 평활화
	for(i=0 ; i<m_size ; i++){
		Temp = m_InputImage[i];
		m_Org_Temp[i]=(unsigned char)(m_Sum_Of_HIST[Temp]*HIGH/m_size);
	}

	// 누적히스토그램에서 최소값과 최대값 지정
	DMIN = m_Sum_Of_DHIST[0];
	DMAX = m_Sum_Of_DHIST[255];

	// 원하는 영상을 평활화
	for(i=0 ; i<256 ; i++){
		m_Sum_Of_ScHIST[i]=(unsigned char)((m_Sum_Of_DHIST[i]-DMIN)*HIGH/(DMAX - DMIN));
	}
	
	// 룩업 테이블을 이용한 명세화
	for( ; ; ){
		for(i=m_Sum_Of_ScHIST[bottom] ; i <= m_Sum_Of_ScHIST[top] ; i++){
			m_TABLE[i] = top;
		}
		top = bottom;
		bottom = bottom - 1;

		if(bottom < -1)
			break;
	}

	for(i=0 ; i<m_size ; i++){
		DADD = (int)m_Org_Temp[i];
		m_OutputImage[i] = m_TABLE[DADD];
	}
}
